import boto3
from io import BytesIO
import json
import base64
import replicate
import os

secrets = boto3.client('secretsmanager')
replicate_key_arn = os.environ.get('REPLICATE_KEY_ARN')

def set_replicate_api_key():
    print("Get stability api key")
    response = secrets.get_secret_value(
        SecretId=replicate_key_arn,
    )
    api_key_json = json.loads(response['SecretString'])
    api_key = api_key_json['REPLICATE_API_TOKEN']
    os.environ["REPLICATE_API_TOKEN"] = api_key

#  Requires setting REPLICATE_API_TOKEN environment variable
def handler(event, context):
    print("Received event: " + json.dumps(event, indent=2))

    # Set up replicate
    set_replicate_api_key()
    # TODO: Other controlnet models

    # For testing
    # body = event["body"]
    # For production
    body = json.loads(event["body"])

    # Get params
    prompt = body['prompt'] 
    base64_img = body['image']

    # Get Buffered reader from base64 string
    buffered_img = BytesIO(base64.b64decode(base64_img))

    advanced_options = body.get('advancedOptions', {})

    model_type = advanced_options.get('modelType', "scribble")
    samples = advanced_options.get('samples', "1")
    guidance_scale = advanced_options.get('guidanceScale', 7.5)
    negative_prompt = advanced_options.get('negativePrompt', "longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality")
    added_prompt = advanced_options.get('addedPrompt', "best quality, extremely detailed")
    ddim_steps = advanced_options.get('ddimSteps', 20)
    
    seed = advanced_options.get('seed', -1)

    if model_type == "scribble":
        # More optimized verison of controlnet scribble
        model = replicate.models.get("jagilley/controlnet-scribble")
        version = model.versions.get("435061a1b5a4c1e26740464bf786efdfa9cb3a3ac488595a2de23e143fdb0117")
    else:
        model = replicate.models.get("jagilley/controlnet")
        version = model.versions.get("8ebda4c70b3ea2a2bf86e44595afb562a2cdf85525c620f1671a78113c9f325b")

    # https://replicate.com/jagilley/controlnet-scribble/versions/435061a1b5a4c1e26740464bf786efdfa9cb3a3ac488595a2de23e143fdb0117#input
    inputs = {
        'image': buffered_img,
        'prompt': prompt,
        'model_type': model_type, # canny, depth, hed, normal, mlsd, scribble, seg, openpose
        'num_samples': samples,
        'image_resolution': "512", # 256, 512, 768
        'detect_resolution': "512", # 256, 512, 768
        'ddim_steps': ddim_steps,
        'scale': guidance_scale, # 0.1 to 30
        'seed': seed,
        'eta': 0,
        'a_prompt': added_prompt,
        'n_prompt': negative_prompt
    }
    print(f"Input: {inputs}")

    # https://replicate.com/jagilley/controlnet-scribble/versions/435061a1b5a4c1e26740464bf786efdfa9cb3a3ac488595a2de23e143fdb0117#output-schema
    try: 
        output = version.predict(**inputs)
        print(f"Output: {output}")
        input_img_url = output[0]
        output_img_url = output[1]
        return {
            "statusCode": 200,
            'headers': { 'Content-Type': 'application/json' },
            "body": json.dumps({'image': output_img_url}),
        }
    except Exception as e:
        print(f"Error: {e}")
        return {
            "statusCode": 500,
            'headers': { 'Content-Type': 'application/json' },
            "body":  json.dumps({'error': str(e)}),
        }
    

if __name__ == '__main__':
    request = {
        "body": {
            "prompt": "Bird",
            "modelType": "scribble",
            "image": "",
            "advancedOptions": {}
        }
    }
    response = handler(request, None)
    print(response)